# Updated Quant Strategy using Goldberg sentiment evaluation
import cvxpy as cp
import numpy as np

# 1) Define numeric returns based on sentiment scores from Goldberg evaluation
r_map = {
    'Haystacks':       0.6,    # +0.6
    'Ranch_sauce':      0.7,    # +0.7 (Saloon Snacks acquisition)
    'Cacti_Needle':    -0.9,    # –0.9 (Economic Express derailment)
    'Solar_panels':    -0.6,    # –0.6 (tax increase)
    'Red_Flags':       -0.7,    # –0.7 (sandstorm damage)
    'VR_Monocle':       0.9,    # +0.9 (VR Quick Draw popularity)
    'Quantum_Coffee':  -0.8,    # –0.8 (side effects hype kill)
    'Moonshine':        0.5,    # +0.5 (space expedition)
    'Striped_shirts':   0.3     # +0.3 (fashion trend)
}

# 2) Prepare data
products = list(r_map.keys())
r = np.array([r_map[p] for p in products])

# 3) Set up optimization variables
x = cp.Variable(len(products))  # allocation fractions
capital = 1_000_000            # total SeaShells
theta = 12 * (100/10)**2 * 1000  # fee coefficient

# 4) Define objective: maximize gain minus nonlinear fee
gain = capital * (r @ x)
fee  = theta * cp.sum_squares(x)
obj  = cp.Maximize(gain - fee)

# 5) Constraints: L1 budget <=1, per-product cap [-0.5, +0.5]
constraints = [cp.norm1(x) <= 1,
               x <= 0.5,
               x >= -0.5]

# 6) Solve
problem = cp.Problem(obj, constraints)
problem.solve()

# 7) Round to integer percentages and enforce total <=100%
x_cont = np.clip(x.value, -0.5, 0.5)
x_int = np.round(x_cont * 100).astype(int)
if np.sum(np.abs(x_int)) > 100:
    x_int = np.round(x_int * (100 / np.sum(np.abs(x_int)))).astype(int)

# 8) Compute expected net profit
ret  = capital * (r @ (x_int / 100))
fee_i = np.sum(12 * (x_int/10)**2 * 1000)
net  = ret - fee_i

# 9) Output
print("Optimal integer allocations (% of capital):")
for prod, pct in zip(products, x_int):
    print(f"  {prod:15s}: {pct}%")
print(f"\nExpected net profit: {net:.0f} SeaShells")
